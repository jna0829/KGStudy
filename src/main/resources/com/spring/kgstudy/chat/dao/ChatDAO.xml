<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.kgstudy.chat.dao.ChatDAO">


	<sql id="searchRoom">
		<if test="type == 'user'">WHERE A.user_id = #{keyword}</if>
		<if test="type == 'title'">WHERE A.chat_room_title like '%'||#{keyword}||''</if>
		<if test="type == 'goal'">WHERE A.chat_room_goal like '%'||#{keyword}||'</if>
		<if test="type == 'category'">WHERE A.chat_room_goal like '%'||#{keyword}||'</if>
		<if test="type == null || type==''">WHERE (A.chat_room_title like '%'||#{keyword}||'%' or
			A.chat_room_comment like '%'||#{keyword}||'%' or
			A.chat_room_goal like '%'||#{keyword}||'%' or A.chat_room_category like
			'%'||#{keyword}||'%')
		</if>


	</sql>

	<sql id="ckFull">
		<if test="grant=='free'">
			and A.chat_room_max != B.chatRoomCnt
		</if>

		<if test="grant=='full'">
			and A.chat_room_max = B.chatRoomCnt
		</if>
	</sql>


	<sql id="searchChat">
		<if test="search.type == 'content'">WHERE A.chat_content like '%'||#{search.keyword}||'</if>
		<if test="search.type == null">WHERE (A.chat_content like '%'||#{search.keyword}||'%' or user_id
			like '%'||#{search.keyword}||'%')
		</if>


	</sql>


<!--  ########################################-->


	<select id="findAllRoom"
		resultType="com.spring.kgstudy.chat.vo.ChatRoomVO">
		select * from(
		select A.*, B.chatRoomCnt, row_number() over(order by B.chatRoomcnt ASC) rn
		from chat_room_table A join
		(select chat_room_id, count(*) chatRoomCnt from chat_user_table group by
		chat_room_id) B
		on A.chat_room_id = B.chat_room_id

		<include refid="searchRoom" />
		<include refid="ckFull" />
		and A.chat_room_state='public'
		order by B.chatRoomcnt, A.chat_room_id)
		where rn between (#{pageNum}-1)*#{amount}+1 and #{pageNum}*#{amount}



	</select>



	<select id="findOneRoom" resultType="com.spring.kgstudy.chat.dto.ChatInfoDTO" >

		select A.*, B.* from chat_room_table A ,(select count(*) chat_room_cnt from chat_user_table where chat_room_id= #{chatRoomId}) B where A.chat_room_id =#{chatRoomId}

	</select>

	<select id="findAllChatUser" parameterType="Integer"
		resultType="com.spring.kgstudy.chat.vo.ChatUserVO">

		select * from chat_user_table where chat_room_id = #{chatRoomId}

	</select>
	
	<select id="findAllUser" resultType="com.spring.kgstudy.chat.vo.ChatUserVO">
	
	select user_id from member where user_id not in(select user_id from chat_user_table where chat_room_id = #{chatRoomId}) and user_id != #{userId} order by user_id

	
	</select>
	
	<select id="findOneChatUser" resultType="com.spring.kgstudy.chat.vo.ChatUserVO">
	
	select * from chat_user_table where user_id=#{userId} and chat_room_id=#{chatRoomId}
	
	</select>


	<select id="findAllChat" parameterType="Map"
		resultType="com.spring.kgstudy.chat.vo.ChatVO">

		select * from chat_table A

		<include refid="searchChat" />
		and chat_room_id = #{chatRoomId} and chat_date between #{search.startDate}
		and #{search.endDate}
		order by A.chat_date


	</select>
	
	
	
	<select id="findAllRoomCnt" resultType="int">

		select count(*) from chat_room_table A
		<include refid="searchRoom" />
		and A.chat_room_state='public'
	</select>
	

<!--  ########################################-->

	<insert id="insertChatRoom">
	

	
	insert into chat_room_table 
	(chat_room_id, chat_room_title, chat_room_comment, chat_room_goal, chat_room_max, chat_room_category, chat_room_img, chat_room_state, user_id, exit_opt, exit_ck, chat_room_date)
values(chat_room_seq.nextval, #{chatRoomTitle}, #{chatRoomComment}, #{chatRoomGoal}, #{chatRoomMax}, #{chatRoomCategory}, #{chatRoomImg}, #{chatRoomState}, #{userId}, #{exitOpt}, #{exitCk}, #{chatRoomDate})
		<selectKey keyProperty="chatRoomId" order="AFTER" resultType="int">
				select chat_room_seq.currval from dual
		</selectKey>


	</insert>
	

	

	<insert id="insertChatUser">
	insert into chat_user_table
	(chat_room_id, user_id, room_auth, chat_user_stamp)
values(#{chatRoomId}, #{userId}, #{roomAuth}, #{chatUserStamp})

	</insert>



	<insert id="insertChat">
	

	
		<selectKey keyProperty="chatId,chatCkCnt" order="BEFORE" resultType="com.spring.kgstudy.chat.vo.ChatVO">
				select chat_seq.nextval chat_id ,((select count(*) from chat_user_table where chat_room_id =#{chatRoomId})-(select count(*) from chat_user_table where chat_room_id =#{chatRoomId} and chat_user_stamp > #{chatDate})) chat_ck_cnt from dual 
		</selectKey>
	
	insert into chat_table
	(chat_id, chat_room_id, user_id, chat_content, chat_date, chat_state, chat_ck_cnt, chat_file)
values(#{chatId}, #{chatRoomId}, #{userId}, #{chatContent}, #{chatDate}, #{chatState}, #{chatCkCnt}, #{chatFile} )

	</insert>





	
<!--  ########################################-->

	<update id="updateChatRoom">
	
		update chat_room_table set
			
			chat_room_title = NVL(#{chatRoomTitle},chat_room_title),
			chat_room_comment = NVL(#{chatRoomComment},chat_room_comment),
			chat_room_goal = NVL(#{chatRoomGoal},chat_room_goal),
			chat_room_max = NVL(#{chatRoomMax},chat_room_max),
			chat_room_category = NVL(#{chatRoomCategory},chat_room_category),
			chat_room_img = NVL(#{chatRoomImg},chat_room_img),
			chat_room_state = NVL(#{chatRoomState},chat_room_state),
			exit_opt = NVL(#{exitOpt},exit_opt),
			exit_ck = NVL(#{exitCk},exit_ck)
			
			where chat_room_id=#{chatRoomId}

   		

	</update>

	

	<update id="updateChatUser">
		update chat_user_table set
		
			room_auth = NVL(#{roomAuth},room_auth),
			chat_user_stamp = NVL(#{chatUserStamp},chat_user_stamp)
			
			where chat_room_id=#{chatRoomId} and user_id = #{userId}

	</update>

	<update id="updateChat">
		update chat_table set

			chat_state = NVL(#{chatState},chat_state),

			where chat_room_id=#{chatRoomId} and user_id = #{userId}
	
	

	</update>

	<update id="updateChatCnt">
	
	update chat_table set
	
	chat_ck_cnt = ((select count(*) from chat_user_table where chat_room_id =#{chatRoomId}) -
					(select count(*) from chat_user_table where chat_room_id =#{chatRoomId} and chat_user_stamp > chat_date) )
	
	where chat_room_id=#{chatRoomId}
	</update>


	
<!--  ########################################-->




	<delete id="deleteChatRoom">
	
	delete from chat_room_table where chat_room_id= #{chatRoomId}	
	

	</delete>

	<delete id="deleteChatUser">
	delete from chat_user_table where chat_room_id = #{chatRoomId} and user_id =#{userId}	
	

	</delete>

	<delete id="deleteChat">

	delete from chat_table where chat_id = #{chatId}
	

	</delete>













</mapper>